// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @unique @default(uuid())
  name            String
  image           String?
  email           String    @unique
  emailVerifiedAt DateTime? @map("email_verified_at")
  password        String
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime? @updatedAt @map("updated_at")
  deletedAt       DateTime? @map("deleted_at")

  address   Address? @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  addressId Int?     @unique @map("address_id")

  refreshTokens  RefreshToken[]
  companies      Company[]
  collaborations Collaborator[]

  @@map("users")
}

model RefreshToken {
  id        String    @id @unique @default(uuid())
  token     String
  expiresIn DateTime  @map("expires_in")
  expiredAt DateTime? @map("expired_at")
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @map("user_id")

  @@map("refresh_tokens")
}

model Address {
  id           Int     @id @default(autoincrement())
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  postalCode   String
  country      String

  user      User?
  company   Company?
  market    Market?
  inventory Inventory?

  @@map("addresses")
}

enum CompanyStatus {
  ACTIVE
  INACTIVE
}

enum CompanyDocumentationType {
  IE
  LE
}

model Company {
  id                     String                    @id @unique @default(uuid())
  email                  String?                   @unique
  status                 CompanyStatus             @default(INACTIVE)
  companyNane            String                    @unique @map("company_name")
  documentation          String?                   @unique
  documentationType      CompanyDocumentationType? @map("documentation_type")
  stateRegistration      String?                   @map("state_registration")
  sector                 String
  createdAt              DateTime                  @default(now()) @map("created_at")
  updatedAt              DateTime?                 @updatedAt @map("updated_at")
  deletedAt              DateTime?                 @map("deleted_at")
  startedIssueInvoicesAt DateTime?                 @map("started_issue_invoices_at")

  address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  addressId Int     @unique @map("address_id")

  founder   User   @relation(fields: [founderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  founderId String @map("founder_id")

  markets                  Market[]
  apiKeys                  ApiKey[]
  inventories              Inventory[]
  owner                    Collaborator?
  refreshTokenCollaborator RefreshTokenCollaborator[]
  orders                   Order[]

  @@map("companies")
}

model ApiKey {
  id        String    @id @unique @default(uuid())
  key       String    @unique
  secret    String    @unique
  revokedAt DateTime? @map("revoked_at")

  company                  Company                    @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId                String                     @map("company_id")
  refreshTokenCollaborator RefreshTokenCollaborator[]

  @@map("api_keys")
}

model Market {
  id        String    @id @unique @default(uuid())
  tradeName String    @map("trade_name")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  addressId Int     @unique @map("address_id")

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId String  @map("company_id")

  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  inventoryId String    @unique @map("inventory_id")

  collaborators            Collaborator[]
  refreshTokenCollaborator RefreshTokenCollaborator[]
  orders                   Order[]

  @@map("markets")
}

model RefreshTokenCollaborator {
  id        String    @id @unique @default(uuid())
  token     String
  expiresIn DateTime  @map("expires_in")
  expiredAt DateTime? @map("expired_at")
  createdAt DateTime  @default(now()) @map("created_at")

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId String  @map("company_id")

  market   Market @relation(fields: [marketId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  marketId String @map("market_id")

  apiKey   ApiKey @relation(fields: [apiKeyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  apiKeyId String @map("api_key_id")

  collaborator   Collaborator @relation(fields: [collaboratorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  collaboratorId String       @map("collaborator_id")

  @@map("refresh_tokens_collaborators")
}

enum RoleCollaborator {
  OWNER
  MANAGER
  STOCKIST
  SELLER
}

model Collaborator {
  id                 String           @id @unique @default(uuid())
  password           String
  email              String           @unique
  actualRemuneration Int              @map("actual_remuneration")
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime?        @updatedAt @map("updated_at")
  deletedAt          DateTime?        @map("deleted_at")
  inactivatedAt      DateTime?        @map("inactivated_at")
  role               RoleCollaborator @default(SELLER)

  market   Market? @relation(fields: [marketId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  marketId String? @map("market_id")

  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId String?  @unique @map("company_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @map("user_id")

  remunerations            Remuneration[]
  refreshTokenCollaborator RefreshTokenCollaborator[]
  ordersOpened             Order[]                    @relation(name: "openedBy")
  ordersClosed             Order[]                    @relation(name: "closedBy")

  @@map("collaborators")
}

model Remuneration {
  id        String    @id @unique @default(uuid())
  value     Int
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  collaborator   Collaborator @relation(fields: [collaboratorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  collaboratorId String       @map("collaborator_id")

  @@map("remunerations")
}

model ProductCategory {
  id          String  @id @unique @default(uuid())
  name        String  @unique
  description String?

  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  products Product[]

  @@map("product_categories")
}

enum UnitType {
  KG
  UN
  MT
  CM
  PL
  LT
}

model ProductVariant {
  id           String    @id @unique @default(uuid())
  name         String
  description  String?
  model        String?
  pricePerUnit Int       @map("price_per_unit")
  brand        String
  image        String?
  barCode      String    @unique @map("bar_code")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")
  unitType     UnitType  @map("unit_type")

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String  @map("product_id")

  productVariantInventories ProductVariantInventory[]
  ordersProductsVariants    OrderProductsVariants[]

  @@map("product_variants")
}

model Product {
  id        String    @id @unique @default(uuid())
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  productVariants   ProductVariant[]
  productCategories ProductCategory[]

  @@map("products")
}

model Inventory {
  id        String    @id @unique @default(uuid())
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  productVariantInventories ProductVariantInventory[]

  address   Address? @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  addressId Int?     @unique @map("address_id")

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId String  @map("company_id")

  market Market?

  @@map("inventories")
}

model ProductVariantInventory {
  id        String    @id @unique @default(uuid())
  quantity  Int
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productVariantId String         @map("product_variant_id")

  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  inventoryId String    @map("inventory_id")

  @@map("products_variants_inventories")
}

model OrderProductsVariants {
  id       String @id @unique @default(uuid())
  quantity Int

  productsVariant  ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productVariantId String         @map("product_variant_id")

  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId String @map("order_id")

  @@map("orders_products_variants")
}

enum OrderPaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  CASH
}

enum OrderPaymentStatus {
  PENDING
  PAYED
  REFUSED
  REFUNDED
}

model OrderPayment {
  id          Int                @id @unique @default(autoincrement())
  method      OrderPaymentMethod
  processedAt DateTime           @default(now()) @map("processed_at")
  amount      Int
  status      OrderPaymentStatus

  order Order?

  @@map("orders_payments")
}

model Order {
  id         String    @id @unique @default(uuid())
  protocol   BigInt    @unique
  subTotal   Int       @map("sub_total")
  discount   Int?
  total      Int
  openedAt   DateTime  @default(now()) @map("opened_at")
  closedAt   DateTime? @map("closed_at")
  refundedAt DateTime? @map("refunded_at")
  deletedAt  DateTime? @map("deleted_at")
  updatedAt  DateTime? @map("updated_at")

  openedBy               Collaborator @relation(name: "openedBy", fields: [openedByCollaboratorId], references: [id])
  openedByCollaboratorId String       @map("opened_by_collaborator_id")

  closedBy               Collaborator? @relation(name: "closedBy", fields: [closedByCollaboratorId], references: [id])
  closedByCollaboratorId String?       @map("closed_by_collaborator_id")

  market   Market @relation(fields: [marketId], references: [id])
  marketId String @map("market_id")

  company   Company @relation(fields: [companyId], references: [id])
  companyId String  @map("company_id")

  orderPayment   OrderPayment? @relation(fields: [orderPaymentId], references: [id])
  orderPaymentId Int?          @unique

  orderProductsVariants OrderProductsVariants[]

  @@map("orders")
}
